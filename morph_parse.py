BITMAP = {"PREFIX_FUNCTION_CONJUNCTION": 0x0000000000000002, "PREFIX_FUNCTION_DEFINITEARTICLE": 0x0000000000000004, "PREFIX_FUNCTION_INTERROGATIVE": 0x0000000000000010, "PREFIX_FUNCTION_PREPOSITION": 0x0000000000000040, "PREFIX_FUNCTION_RELATIVIZER_SUBORDINATINGCONJUNCTION": 0x00000000000000100, "PREFIX_FUNCTION_TEMPORALSUBCONJ": 0x00000000000000200, "PREFIX_FUNCTION_ADVERB": 0x00000000000000400, "PREFIX_MASK": 0x0000000000000756, "BASEFORM_POS_CONTINUE": 0x0, "BASEFORM_POS_ADJECTIVE": 0x10000, "BASEFORM_POS_ADVERB": 0x20000, "BASEFORM_POS_CONJUNCTION": 0x30000, "BASEFORM_POS_AT_PREP": 0x40000, "BASEFORM_POS_NEGATION": 0x50000, "BASEFORM_POS_NOUN": 0x60000, "BASEFORM_POS_NUMERAL": 0x70000, "BASEFORM_POS_PREPOSITION": 0x80000, "BASEFORM_POS_PRONOUN": 0x90000, "BASEFORM_POS_PROPERNAME": 0xa0000, "BASEFORM_POS_CITATION": 0xb0000, "BASEFORM_POS_INITIALISM": 0xc0000, "BASEFORM_POS_VERB": 0xd0000, "BASEFORM_POS_PUNCTUATION": 0xe0000, "BASEFORM_POS_INTERROGATIVE": 0xf0000, "BASEFORM_POS_INTERJECTION": 0x100000, "BASEFORM_POS_UNKNOWN": 0x110000, "BASEFORM_POS_QUANTIFIER": 0x120000, "BASEFORM_POS_EXISTENTIAL": 0x130000, "BASEFORM_POS_MODAL": 0x140000, "BASEFORM_POS_PREFIX": 0x150000, "BASEFORM_POS_URL": 0x160000, "BASEFORM_POS_FOREIGN": 0x170000, "BASEFORM_POS_JUNK": 0x180000, "BASEFORM_POS_UNCLEAR": 0x190000, "BASEFORM_POS_PARTICIPLE": 0x1a0000, "BASEFORM_POS_COPULA": 0x1b0000, "BASEFORM_POS_REF": 0x1c0000, "BASEFORM_POS_TITULAR": 0x1d0000, "BASEFORM_POS_SHEL_PREP": 0x1e0000, "BASEFORM_POS_NONSTANDARD": 0x1f0000, "BASEFORM_GENDER_MASCULINE": 0x0000000000200000, "BASEFORM_GENDER_FEMININE": 0x0000000000400000, "BASEFORM_GENDER_MASCULINEFEMININE": 0x0000000000600000, "BASEFORM_NUMBER": 0x0000000007000000, "BASEFORM_NUMBER_SINGULAR": 0x0000000001000000, "BASEFORM_NUMBER_PLURAL": 0x0000000002000000, "BASEFORM_NUMBER_DUAL": 0x0000000003000000, "BASEFORM_NUMBER_DUALPLURAL": 0x0000000004000000, "BASEFORM_NUMBER_SINGULARPLURAL": 0x0000000005000000, "BASEFORM_PERSON": 0x0000000038000000, "BASEFORM_PERSON_1": 0x0000000008000000, "BASEFORM_PERSON_2": 0x0000000010000000, "BASEFORM_PERSON_3": 0x0000000018000000, "BASEFORM_PERSON_ANY": 0x0000000020000000, "BASEFORM_STATUS": 0x00000000c0000000, "BASEFORM_STATUS_ABSOLUTE": 0x0000000040000000, "BASEFORM_STATUS_CONSTRUCT": 0x0000000080000000, "BASEFORM_STATUS_ABSOLUTECONSTRUCT": 0x00000000c0000000, "BASEFORM_TENSE": 0x0000000e00000000, "BASEFORM_TENSE_PAST": 0x0000000200000000, "BASEFORM_TENSE_ALLTIME": 0x0000000400000000, "BASEFORM_TENSE_PRESENT": 0x0000000600000000, "BASEFORM_TENSE_FUTURE": 0x0000000800000000, "BASEFORM_TENSE_IMPERATIVE": 0x0000000a00000000, "BASEFORM_TENSE_TOINFINITIVE": 0x0000000c00000000, "BASEFORM_TENSE_BAREINFINITIVE": 0x0000000e00000000, "SUFFIX_MASK": 0x0000fdb000000000, "SUFFIX_FUNCTION": 0x0000003000000000, "SUFFIX_FUNCTION_POSSESIVEPRONOUN": 0x0000001000000000, "SUFFIX_FUNCTION_ACCUSATIVENOMINATIVE": 0x0000002000000000, "SUFFIX_FUNCTION_PRONOMIAL": 0x0000003000000000, "SUFFIX_GENDER": 0x0000018000000000, "SUFFIX_GENDER_MASCULINE": 0x0000008000000000, "SUFFIX_GENDER_FEMININE": 0x0000010000000000, "SUFFIX_GENDER_MASCULINEFEMININE": 0x0000018000000000, "FULLFORM_ARAMAIC": 0x20000000000, "SUFFIX_NUMBER": 0x00001c0000000000, "SUFFIX_NUMBER_SINGULAR": 0x0000040000000000, "SUFFIX_NUMBER_PLURAL": 0x0000080000000000, "SUFFIX_NUMBER_DUAL": 0x00000c0000000000, "SUFFIX_NUMBER_DUALPLURAL": 0x0000100000000000, "SUFFIX_NUMBER_SINGULARPLURAL": 0x0000140000000000, "SUFFIX_PERSON": 0x0000e00000000000, "SUFFIX_PERSON_1": 0x0000200000000000, "SUFFIX_PERSON_2": 0x0000400000000000, "SUFFIX_PERSON_3": 0x0000600000000000, "SUFFIX_PERSON_ANY": 0x0000800000000000, "BASEFORM_BINYAN_PAAL": 0x0008000000000000, "BASEFORM_BINYAN_NIFAL": 0x0010000000000000, "BASEFORM_BINYAN_HIFIL": 0x0018000000000000, "BASEFORM_BINYAN_HUFAL": 0x0020000000000000, "BASEFORM_BINYAN_PIEL": 0x0028000000000000, "BASEFORM_BINYAN_PUAL": 0x0030000000000000, "BASEFORM_BINYAN_HITPAEL": 0x0038000000000000}

# Prefix
# Function
# bits 2-3, 5,7, 9-11
PREFIX_FUNCTION_CONJUNCTION = 0x0000000000000002
PREFIX_FUNCTION_DEFINITEARTICLE = 0x0000000000000004
PREFIX_FUNCTION_INTERROGATIVE = 0x0000000000000010
PREFIX_FUNCTION_PREPOSITION = 0x0000000000000040
PREFIX_FUNCTION_RELATIVIZER_SUBORDINATINGCONJUNCTION = 0x00000000000000100
PREFIX_FUNCTION_TEMPORALSUBCONJ = 0x00000000000000200
PREFIX_FUNCTION_ADVERB = 0x00000000000000400
PREFIX_MASK = 0x0000000000000756

# POS
# bits 17-21
BASEFORM_POS = 0x1f0000
BASEFORM_POS_CONTINUE = 0x0
BASEFORM_POS_ADJECTIVE = 0x10000
BASEFORM_POS_ADVERB = 0x20000
BASEFORM_POS_CONJUNCTION = 0x30000
BASEFORM_POS_AT_PREP = 0x40000
BASEFORM_POS_NEGATION = 0x50000
BASEFORM_POS_NOUN = 0x60000
BASEFORM_POS_NUMERAL = 0x70000
BASEFORM_POS_PREPOSITION = 0x80000
BASEFORM_POS_PRONOUN = 0x90000
BASEFORM_POS_PROPERNAME = 0xa0000
BASEFORM_POS_CITATION = 0xb0000
BASEFORM_POS_INITIALISM = 0xc0000
BASEFORM_POS_VERB = 0xd0000
BASEFORM_POS_PUNCTUATION = 0xe0000
BASEFORM_POS_INTERROGATIVE = 0xf0000
BASEFORM_POS_INTERJECTION = 0x100000
BASEFORM_POS_UNKNOWN = 0x110000
BASEFORM_POS_QUANTIFIER = 0x120000
BASEFORM_POS_EXISTENTIAL = 0x130000
BASEFORM_POS_MODAL = 0x140000
BASEFORM_POS_PREFIX = 0x150000
BASEFORM_POS_URL = 0x160000
BASEFORM_POS_FOREIGN = 0x170000
BASEFORM_POS_JUNK = 0x180000
BASEFORM_POS_UNCLEAR = 0x190000
BASEFORM_POS_PARTICIPLE = 0x1a0000
BASEFORM_POS_COPULA = 0x1b0000
BASEFORM_POS_REF = 0x1c0000
BASEFORM_POS_TITULAR = 0x1d0000
BASEFORM_POS_SHEL_PREP = 0x1e0000
BASEFORM_POS_NONSTANDARD = 0x1f0000
POS_LI = [BASEFORM_POS, BASEFORM_POS_CONTINUE, BASEFORM_POS_ADJECTIVE, BASEFORM_POS_ADVERB, BASEFORM_POS_CONJUNCTION, BASEFORM_POS_AT_PREP, BASEFORM_POS_NEGATION, BASEFORM_POS_NOUN, BASEFORM_POS_NUMERAL, BASEFORM_POS_PREPOSITION, BASEFORM_POS_PRONOUN, BASEFORM_POS_PROPERNAME, BASEFORM_POS_CITATION, BASEFORM_POS_INITIALISM, BASEFORM_POS_VERB, BASEFORM_POS_PUNCTUATION, BASEFORM_POS_INTERROGATIVE, BASEFORM_POS_INTERJECTION, BASEFORM_POS_UNKNOWN, BASEFORM_POS_QUANTIFIER, BASEFORM_POS_EXISTENTIAL, BASEFORM_POS_MODAL, BASEFORM_POS_PREFIX, BASEFORM_POS_URL, BASEFORM_POS_FOREIGN, BASEFORM_POS_JUNK, BASEFORM_POS_UNCLEAR, BASEFORM_POS_PARTICIPLE, BASEFORM_POS_COPULA, BASEFORM_POS_REF, BASEFORM_POS_TITULAR, BASEFORM_POS_SHEL_PREP, BASEFORM_POS_NONSTANDARD]

# Gender
#bits 22-23
BASEFORM_GENDER = 0x0000000000600000
BASEFORM_GENDER_MASCULINE = 0x0000000000200000
BASEFORM_GENDER_FEMININE = 0x0000000000400000
BASEFORM_GENDER_MASCULINEFEMININE = 0x0000000000600000

# Number
# bits 25-27
BASEFORM_NUMBER = 0x0000000007000000
BASEFORM_NUMBER_SINGULAR = 0x0000000001000000
BASEFORM_NUMBER_PLURAL = 0x0000000002000000
BASEFORM_NUMBER_DUAL = 0x0000000003000000
BASEFORM_NUMBER_DUALPLURAL = 0x0000000004000000
BASEFORM_NUMBER_SINGULARPLURAL = 0x0000000005000000

# Person
# bits 28-30
BASEFORM_PERSON = 0x0000000038000000
BASEFORM_PERSON_1 = 0x0000000008000000
BASEFORM_PERSON_2 = 0x0000000010000000
BASEFORM_PERSON_3 = 0x0000000018000000
BASEFORM_PERSON_ANY = 0x0000000020000000

# Status
# bits 31-32
BASEFORM_STATUS = 0x00000000c0000000
BASEFORM_STATUS_ABSOLUTE = 0x0000000040000000
BASEFORM_STATUS_CONSTRUCT = 0x0000000080000000
BASEFORM_STATUS_ABSOLUTECONSTRUCT = 0x00000000c0000000

# Tense
# bits 34-36
BASEFORM_TENSE = 0x0000000e00000000
BASEFORM_TENSE_PAST = 0x0000000200000000
BASEFORM_TENSE_ALLTIME = 0x0000000400000000
BASEFORM_TENSE_PRESENT = 0x0000000600000000
BASEFORM_TENSE_FUTURE = 0x0000000800000000
BASEFORM_TENSE_IMPERATIVE = 0x0000000a00000000
BASEFORM_TENSE_TOINFINITIVE = 0x0000000c00000000
BASEFORM_TENSE_BAREINFINITIVE = 0x0000000e00000000

# Suffix: (gender,number,status,function), bits 37-38, 40-41, 43-48
SUFFIX_MASK = 0x0000fdb000000000

# Suffix Function
# bits 37-38
SUFFIX_FUNCTION = 0x0000003000000000
SUFFIX_FUNCTION_POSSESIVEPRONOUN = 0x0000001000000000
SUFFIX_FUNCTION_ACCUSATIVENOMINATIVE = 0x0000002000000000
SUFFIX_FUNCTION_PRONOMIAL = 0x0000003000000000

# Suffix Gender
# bits 40-41
SUFFIX_GENDER = 0x0000018000000000
SUFFIX_GENDER_MASCULINE = 0x0000008000000000
SUFFIX_GENDER_FEMININE = 0x0000010000000000
SUFFIX_GENDER_MASCULINEFEMININE = 0x0000018000000000

# Is the word Aramaic?
# bit 42
FULLFORM_ARAMAIC = 0x20000000000

# Suffix Number
# bits 43-45
SUFFIX_NUMBER = 0x00001c0000000000
SUFFIX_NUMBER_SINGULAR = 0x0000040000000000
SUFFIX_NUMBER_PLURAL = 0x0000080000000000
SUFFIX_NUMBER_DUAL = 0x00000c0000000000
SUFFIX_NUMBER_DUALPLURAL = 0x0000100000000000
SUFFIX_NUMBER_SINGULARPLURAL = 0x0000140000000000

# Suffix Person
# bits 46-48
SUFFIX_PERSON = 0x0000e00000000000
SUFFIX_PERSON_1 = 0x0000200000000000
SUFFIX_PERSON_2 = 0x0000400000000000
SUFFIX_PERSON_3 = 0x0000600000000000
SUFFIX_PERSON_ANY = 0x0000800000000000

# Binyanim
# bits 52-54
BASEFORM_BINYAN = 0x0038000000000000
BASEFORM_BINYAN_PAAL = 0x0008000000000000
BASEFORM_BINYAN_NIFAL = 0x0010000000000000
BASEFORM_BINYAN_HIFIL = 0x0018000000000000
BASEFORM_BINYAN_HUFAL = 0x0020000000000000
BASEFORM_BINYAN_PIEL = 0x0028000000000000
BASEFORM_BINYAN_PUAL = 0x0030000000000000
BASEFORM_BINYAN_HITPAEL = 0x0038000000000000

# def num2str(num):
#     if type(num) == str:
#         num = int(num)
#     result = [0] * 6
#     if num & BASEFORM_BINYAN_PAAL:
#         result[0] = 1
#     if num & BASEFORM_BINYAN_NIFAL:
#         result[0] = 2
#     if num & BASEFORM_BINYAN_HIFIL:
#         result[0] = 3
#     if num & BASEFORM_BINYAN_HUFAL:
#         result[0] = 4
#     if num & BASEFORM_BINYAN_PIEL:
#         result[0] = 5
#     if num & BASEFORM_BINYAN_PUAL:
#         result[0] = 6
#     if num & BASEFORM_BINYAN_HITPAEL:
#         result[0] = 7
#
#
#     if num & FULLFORM_ARAMAIC:
#         result[1] = 1
#
#     if (num & SUFFIX_NUMBER_SINGULAR) or (num & BASEFORM_NUMBER_SINGULAR):
#         result[2] = 1
#     if (num & SUFFIX_NUMBER_PLURAL) or (num & BASEFORM_NUMBER_PLURAL):
#         result[2] = 2
#     if (num & SUFFIX_NUMBER_DUAL) or (num & BASEFORM_NUMBER_DUAL):
#         result[2] = 3
#     if (num & SUFFIX_NUMBER_DUALPLURAL) or (num & BASEFORM_NUMBER_DUALPLURAL):
#         result[2] = 4
#     if (num & SUFFIX_NUMBER_SINGULARPLURAL) or (num & BASEFORM_NUMBER_SINGULARPLURAL):
#         result[2] = 5
#
#     if (num & SUFFIX_GENDER_MASCULINE) or (num & BASEFORM_GENDER_MASCULINE):
#         result[3] = 1
#     if (num & SUFFIX_GENDER_FEMININE) or (num & BASEFORM_GENDER_FEMININE):
#         result[3] = 2
#
#     if num & BASEFORM_TENSE_PAST:
#         result[4] = 1
#     if num & BASEFORM_TENSE_ALLTIME:
#         result[4] = 2
#     if num & BASEFORM_TENSE_PRESENT:
#         result[4] = 3
#     if num & BASEFORM_TENSE_FUTURE:
#         result[4] = 4
#     if num & BASEFORM_TENSE_IMPERATIVE:
#         result[4] = 5
#     if num & BASEFORM_TENSE_TOINFINITIVE:
#         result[4] = 6
#     if num & BASEFORM_TENSE_BAREINFINITIVE:
#         result[4] = 7
#
#     for i, pos in enumerate(POS_LI):
#         if num & pos == pos:
#             result[5] = i
#     return "".join([str(a) for a in result])

def parse_num(num):
    if type(num) == str:
        num = int(num)
    result = []
    for k, v in BITMAP.items():
        if "_POS" in k:
            if num & v == num & BASEFORM_POS == v:
                result += [k]
        elif "BASEFORM_GENDER" in k:
            if num & v == num & BASEFORM_GENDER == v:
                result += [k]
        elif "BASEFORM_NUMBER" in k:
            if num & v == num & BASEFORM_NUMBER == v:
                result += [k]
        elif "BASEFORM_PERSON" in k:
            if num & v == num & BASEFORM_PERSON == v:
                result += [k]
        elif "BASEFORM_STATUS" in k:
            if num & v == num & BASEFORM_STATUS == v:
                result += [k]
        elif "BASEFORM_TENSE" in k:
            if num & v == num & BASEFORM_TENSE == v:
                result += [k]
        elif "SUFFIX_FUNCTION" in k:
            if num & v == num & SUFFIX_FUNCTION == v:
                result += [k]
        elif "SUFFIX_GENDER" in k:
            if num & v == num & SUFFIX_GENDER == v:
                result += [k]
        elif "SUFFIX_NUMBER" in k:
            if num & v == num & SUFFIX_NUMBER == v:
                result += [k]
        elif "SUFFIX_PERSON" in k:
            if num & v == num & SUFFIX_PERSON == v:
                result += [k]
        elif "BASEFORM_BINYAN" in k:
            if num & v == num & BASEFORM_BINYAN == v:
                result += [k]
        elif num & v == v:
            result += [k]
    return result

def parse_num_to_str(num, sep=":"):
    return sep.join(parse_num(num))

def do(num):
    print(parse_num(num))
    print(hex(num))
# print(num2str(2254007849254912))
# print(parsenum(983104))
# print(parsenum(2254007849254912))
# print(len(parsenum(2254007849254912)))
# print(hex(983104))
if __name__ == "__main__":
    do(2254025029124096)